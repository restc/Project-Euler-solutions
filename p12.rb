# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?


# Found!!! Answer is 76576500, which is the 12375th Triangular Number and has 576 divisors 

class TriangularNumbers
  attr_accessor :list, :triangular

  def initialize(default = 10)
    @list = []
    @triangular = 0
  end

  def usage_msg
    puts "\nCalling TriangularNumbers.new will find the 10th triangular number. \nTo find a different number, use TriangularNumbers.new [number]."
    puts
  end

  def list
    divisors = 0
    triangular = 0
    10000.upto(20000) do |num|
      if num % 1000 == 0
        puts num
      end
      triangular = num.find_triangular
      @list << triangular
      divisors = triangular.findDivisors.length
      if divisors > 500
        @triangular = num
        break
      end
    end
    puts @triangular
    list
  end

end


class Integer

  def findDivisors
    # Where self is an integer
    query = self
    divisors = []
    limit = Math.sqrt(query)

    1.upto(limit) do |x|
      if query % x == 0
        divisors << [x, (query / x)]
      end
      if divisors != nil
        divisors.flatten!
      end

      if divisors.length > 0
        divisors.sort!
      end
    end
    divisors
  end

  def find_triangular
    num = self
    num * (num + 1) / 2
  end

end

# t = TriangularNumbers.new
# t.find_number_of_501



# Use permutati
